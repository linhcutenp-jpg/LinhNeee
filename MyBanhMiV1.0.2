print("Hello, Baby <3")

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local RunService = game:GetService("RunService")

local lp = Players.LocalPlayer
local pg = lp:WaitForChild("PlayerGui")
local existing = pg:FindFirstChild("MenuUI")
if existing then
    pcall(function() existing:Destroy() end)
end

local function C(class, props, parent)
    local obj = Instance.new(class)
    if props then
        for k, v in pairs(props) do
            pcall(function() obj[k] = v end)
        end
    end
    if parent then obj.Parent = parent end
    return obj
end

-- Themes & Fonts (modified colors)
local Themes = {
    Dark = { Primary = Color3.fromRGB(24,24,30), Accent = Color3.fromRGB(145,145,145), Text = Color3.fromRGB(235,240,235), ButtonText = Color3.fromRGB(235,235,240) },
    Pink = { Primary = Color3.fromRGB(255,187,225), Accent = Color3.fromRGB(198,117,225), Text = Color3.fromRGB(50,50,50), ButtonText = Color3.fromRGB(240,240,240) },
    Blue = { Primary = Color3.fromRGB(135,206,235), Accent = Color3.fromRGB(68,142,228), Text = Color3.fromRGB(255,255,255), ButtonText = Color3.fromRGB(240,240,240) },
    White = { Primary = Color3.fromRGB(255,255,255), Accent = Color3.fromRGB(50,50,50), Text = Color3.fromRGB(0,0,0), ButtonText = Color3.fromRGB(0,0,0) }
}
local Fonts = { Enum.Font.Gotham, Enum.Font.GothamBold, Enum.Font.Ubuntu, Enum.Font.Roboto, Enum.Font.FredokaOne }

local screen = C("ScreenGui", { Name = "MenuUI", ResetOnSpawn = false }, pg)
screen.Enabled = true
local win = C("Frame", {
    Name = "Window",
    Size = UDim2.fromOffset(420, 480),
    Position = UDim2.fromScale(0.08, 0.2),
    BackgroundColor3 = Color3.fromRGB(30,30,35),
    BorderSizePixel = 0,
    Active = true
}, screen)
C("UICorner", { CornerRadius = UDim.new(0,14) }, win)
local stroke = C("UIStroke", { ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Thickness = 2, Color = Color3.fromRGB(90,90,100) }, win)

local header = C("Frame", { Size = UDim2.new(1,0,0,42), BackgroundTransparency = 0.15, BackgroundColor3 = Color3.fromRGB(50,50,60), BorderSizePixel = 0 }, win)
C("UICorner", { CornerRadius = UDim.new(0,14) }, header)
local title = C("TextLabel", {
    Size = UDim2.new(1,-100,1,0),
    Position = UDim2.fromOffset(14,0),
    BackgroundTransparency = 1,
    Text = "Linh Is Script <3",
    TextColor3 = Color3.fromRGB(235,235,240),
    Font = Enum.Font.GothamBold,
    TextSize = 18,
    TextXAlignment = Enum.TextXAlignment.Left
}, header)

local toggleBtn = C("TextButton", {
    Name = "ToggleBtn",
    Size = UDim2.fromOffset(80,26),
    Position = UDim2.new(1,-90,0.5,-13),
    BackgroundColor3 = Color3.fromRGB(90,63,150),
    BorderSizePixel = 0,
    Text = "Hide",
    TextColor3 = Color3.fromRGB(235,235,240),
    Font = Enum.Font.GothamMedium,
    TextSize = 14,
    AutoButtonColor = false
}, header)
C("UICorner", { CornerRadius = UDim.new(0,10) }, toggleBtn)

-- Tabs setup
local tabs = { "Main", "Misc", "Setting" }
local tabHolder = C("Frame", { Parent = win, Size = UDim2.new(1,-20,0,36), Position = UDim2.new(0,10,0,48), BackgroundTransparency = 1 })
local tabButtons = {}
local tabContents = {}
local currentTab = 1
for i, name in ipairs(tabs) do
    local btn = C("TextButton", {
        Parent = tabHolder,
        Size = UDim2.new(0,100,0,28),
        Position = UDim2.new(0,(i-1)*106,0,4),
        BackgroundColor3 = Color3.fromRGB(70,70,80),
        BorderSizePixel = 0,
        Text = name,
        TextColor3 = Color3.fromRGB(235,235,240),
        Font = Enum.Font.GothamBold,
        TextSize = 14,
        AutoButtonColor = false
    }, tabHolder)
    C("UICorner", { CornerRadius = UDim.new(0,8) }, btn)
    tabButtons[i] = btn

    local content = C("Frame", {
        Parent = win,
        Size = UDim2.new(1,-20,1,-98),
        Position = UDim2.new(0,10,0,90),
        BackgroundTransparency = 1,
        Visible = (i == currentTab)
    }, win)
    C("UIListLayout", {
        FillDirection = Enum.FillDirection.Vertical,
        Padding = UDim.new(0,8),
        HorizontalAlignment = Enum.HorizontalAlignment.Left,
        SortOrder = Enum.SortOrder.LayoutOrder
    }, content)
    tabContents[i] = content

    btn.MouseButton1Click:Connect(function()
        if animating then return end
        currentTab = i
        for j = 1, #tabs do
            tabContents[j].Visible = not hidden and (j == currentTab)
            tabButtons[j].BackgroundColor3 = (j == currentTab) and Color3.fromRGB(130,130,220) or Color3.fromRGB(70,70,80)
        end
    end)
end
tabButtons[1].BackgroundColor3 = Color3.fromRGB(130,130,220)

local hidden = false
local animating = false
local animDur = 0.28
local easingStyle = Enum.EasingStyle.Quad
local easingDir = Enum.EasingDirection.Out

local speedOn = false
local speedValue = 100
local jumpEnabled = false
local infJump = false
local noclip = false
local esp = false
local xray = false

local flying = false
local bv = nil
local flySpeed = 60
local flyConn = nil

local noclipConn = nil
local allConns = {}

local function tweenAllTexts(target)
    local tweens = {}
    for _, v in pairs(win:GetDescendants()) do
        if (v:IsA("TextLabel") or v:IsA("TextButton")) and v ~= toggleBtn then
            if target == 0 then v.TextTransparency = 1 end 
            local ok, t = pcall(function()
                return TweenService:Create(v, TweenInfo.new(0.2, easingStyle, easingDir), {TextTransparency = target})
            end)
            if ok and t then table.insert(tweens, t) end
        end
    end
    return tweens
end

local function setHidden(state)
    if animating then return end
    animating = true
    hidden = state
    toggleBtn.Text = hidden and "Show" or "Hide"

    if hidden then
        for _, v in pairs(tabButtons) do v.Active = false end

        local tweens = tweenAllTexts(1)
        for _, t in ipairs(tweens) do t:Play() end

        local sizeTween = TweenService:Create(win, TweenInfo.new(animDur, easingStyle, easingDir), {Size = UDim2.fromOffset(400, 70)})
        sizeTween:Play()
        sizeTween.Completed:Wait()

        for _, v in pairs(tabButtons) do v.Visible = false end
        for _, v in pairs(tabContents) do v.Visible = false end

    else
        for _, v in pairs(tabButtons) do
            v.Visible = true
            v.Active = false
        end
        for i = 1, #tabContents do
            tabContents[i].Visible = (i == currentTab)
        end

        local sizeTween = TweenService:Create(win, TweenInfo.new(animDur, easingStyle, easingDir), {Size = UDim2.fromOffset(420, 480)})
        sizeTween:Play()
        sizeTween.Completed:Wait()

        local tweens = tweenAllTexts(0)
        for _, t in ipairs(tweens) do t:Play() end

        for _, v in pairs(tabButtons) do v.Active = true end
    end

    animating = false
end

toggleBtn.MouseButton1Click:Connect(function()
    setHidden(not hidden)
end)

local bindToggleConn = ContextActionService:BindAction("ToggleMenu_RShift", function(name, state, input)
    if state == Enum.UserInputState.Begin then
        setHidden(not hidden)
    end
    return Enum.ContextActionResult.Sink
end, false, Enum.KeyCode.RightShift)

local closeBtn = C("TextButton", {
    Name = "CloseBtn",
    Size = UDim2.fromOffset(26,26),
    Position = UDim2.new(1,-30,0.5,-13),
    BackgroundColor3 = Color3.fromRGB(200,60,60),
    BorderSizePixel = 0,
    Text = "X",
    TextColor3 = Color3.fromRGB(255,255,255),
    Font = Enum.Font.GothamBold,
    TextSize = 16,
    AutoButtonColor = false
}, header)
C("UICorner", { CornerRadius = UDim.new(0,6) }, closeBtn)

closeBtn.MouseEnter:Connect(function()
    TweenService:Create(closeBtn, TweenInfo.new(0.12), {BackgroundColor3 = Color3.fromRGB(255,80,80)}):Play()
end)
closeBtn.MouseLeave:Connect(function()
    TweenService:Create(closeBtn, TweenInfo.new(0.12), {BackgroundColor3 = Color3.fromRGB(200,60,60)}):Play()
end)

closeBtn.MouseButton1Click:Connect(function()
    win.Visible = false
end)

do
    local dragging = false
    local dragStart, startPos
    header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = win.Position
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            win.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
    end)
end

local function TabRow(tabIndex, labelText)
    local row = C("Frame", { Size = UDim2.new(1,0,0,36), BackgroundTransparency = 1 }, tabContents[tabIndex])
    local lbl = C("TextLabel", { Size = UDim2.new(0,120,1,0), BackgroundTransparency = 1, Text = labelText, TextColor3 = Color3.fromRGB(220,220,230), Font = Enum.Font.Gotham, TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left }, row)
    return row, lbl
end

-- =========================
-- MAIN TAB FEATURES
-- =========================

-- Theme + Theme buttons
local themeRow = TabRow(1, "Theme")
local themeHolder = C("Frame", { Parent = themeRow, Size = UDim2.new(1,-130,1,0), Position = UDim2.new(0,130,0,0), BackgroundTransparency = 1 }, themeRow)
local flow = C("UIGridLayout", { CellSize = UDim2.fromOffset(60,26), CellPadding = UDim2.fromOffset(6,6), FillDirectionMaxCells = 5, SortOrder = Enum.SortOrder.LayoutOrder }, themeHolder)
local currentTheme = "Dark"

local function applyTheme(name)
    local t = Themes[name] or Themes.Dark
    currentTheme = name
    pcall(function()
        win.BackgroundColor3 = t.Primary
        header.BackgroundColor3 = t.Accent
        title.TextColor3 = t.Text
        toggleBtn.TextColor3 = t.Text
        stroke.Color = t.Accent:Lerp(Color3.new(1,1,1), 0.15)
        for _, v in pairs(win:GetDescendants()) do
            if v:IsA("TextButton") then
                v.TextColor3 = t.ButtonText
            elseif v:IsA("TextLabel") then
                v.TextColor3 = t.Text
            end
        end
    end)
end

for name, _ in pairs(Themes) do
    local b = C("TextButton", { Name = "Theme_" .. name, Text = name, BackgroundColor3 = Color3.fromRGB(70,70,80), TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamMedium, TextSize = 14, BorderSizePixel = 0 }, themeHolder)
    C("UICorner", { CornerRadius = UDim.new(0,8) }, b)
    b.MouseEnter:Connect(function() TweenService:Create(b, TweenInfo.new(0.12), { BackgroundColor3 = Color3.fromRGB(95,95,110) }):Play() end)
    b.MouseLeave:Connect(function() TweenService:Create(b, TweenInfo.new(0.12), { BackgroundColor3 = Color3.fromRGB(70,70,80) }):Play() end)
    b.MouseButton1Click:Connect(function() applyTheme(name) end)
end

local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local win = game.Players.LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("YourMenuFrame")

-- Hàm update độ trong suốt
local function updateMenuTransparency(value)
    local transparency = value * 0.8 -- max 0.8
    win.BackgroundTransparency = transparency
    for _, child in pairs(win:GetChildren()) do
        if child:IsA("GuiObject") then
            child.BackgroundTransparency = transparency
            if child:IsA("TextLabel") or child:IsA("TextButton") then
                child.TextTransparency = value
            end
        end
    end
end

-- Hàm tạo slider
local function CreateSlider(parent)
    local slider = Instance.new("Frame")
    slider.Parent = parent
    slider.Size = UDim2.new(1, -130, 1, 0)
    slider.Position = UDim2.new(0, 130, 0, 0)
    slider.BackgroundTransparency = 1

    local bar = Instance.new("Frame")
    bar.Parent = slider
    bar.Size = UDim2.new(1, 0, 0, 6)
    bar.Position = UDim2.new(0, 0, 0.5, -3)
    bar.BackgroundColor3 = Color3.fromRGB(90, 90, 100)
    bar.BorderSizePixel = 0
    local barCorner = Instance.new("UICorner")
    barCorner.CornerRadius = UDim.new(1, 0)
    barCorner.Parent = bar

    local knob = Instance.new("Frame")
    knob.Parent = slider
    knob.Size = UDim2.new(0, 14, 0, 14)
    knob.Position = UDim2.new(0, 0, 0.5, -7)
    knob.BackgroundColor3 = Color3.fromRGB(230, 230, 235)
    knob.BorderSizePixel = 0
    knob.Active = true
    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(1, 0)
    knobCorner.Parent = knob

    local dragging = false

    local function updateKnobPosition(x)
        local sliderPosX = slider.AbsolutePosition.X
        local sliderWidth = slider.AbsoluteSize.X
        if sliderWidth == 0 then return end

        local relativeX = math.clamp(x - sliderPosX, 0, sliderWidth)
        knob.Position = UDim2.new(0, relativeX - knob.AbsoluteSize.X/2, 0.5, -knob.AbsoluteSize.Y/2)

        local value = relativeX / sliderWidth
        updateMenuTransparency(value)
    end

    -- Kéo knob
    knob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateKnobPosition(input.Position.X)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    return slider, knob
end
local transRow = TabRow(3, "Transparency")
local slider, knob = CreateSlider(transRow)


-- ====== SETTING TAB: Reset Script + Toggle UI ======
do
    local setRow = TabRow(3, "Reset Script")
    local resetBtn = C("TextButton", {
        Parent = setRow,
        Size = UDim2.new(0,140,1,0),
        Position = UDim2.new(0,130,0,0),
        BackgroundColor3 = Color3.fromRGB(200,60,60),
        BorderSizePixel = 0,
        Text = "Reset All",
        TextColor3 = Color3.fromRGB(255,255,255),
        Font = Enum.Font.GothamBold,
        TextSize = 14
    }, setRow)
    C("UICorner", { CornerRadius = UDim.new(0,8) }, resetBtn)

    local resetDebounce = false
    local function resetAll()
        if resetDebounce then return end
        resetDebounce = true

        if getgenv()._RESET_DATA then
            for _, obj in ipairs(getgenv()._RESET_DATA.uiRefs) do 
                pcall(function() obj:Destroy() end) 
            end
            table.clear(getgenv()._RESET_DATA.uiRefs)

            for _, c in ipairs(getgenv()._RESET_DATA.connections) do 
                pcall(function() c:Disconnect() end) 
            end
            table.clear(getgenv()._RESET_DATA.connections)

            for _, t in ipairs(getgenv()._RESET_DATA.threads) do 
                pcall(function() coroutine.close(t) end) 
            end
            table.clear(getgenv()._RESET_DATA.threads)
        end

        if _BOUND_ACTIONS then
            for _, name in ipairs(_BOUND_ACTIONS) do 
                pcall(function() ContextActionService:UnbindAction(name) end) 
            end
            table.clear(_BOUND_ACTIONS)
        end

        if win then
            pcall(function()
                win:Destroy()
            end)
            win = nil
        end

        getgenv().MyBanhMi_Running = false
        flashBtn(resetBtn, "Reset!", 1)

        task.delay(1, function() resetDebounce = false end)
    end

    resetBtn.MouseButton1Click:Connect(resetAll)

    local uiHidden = false
    local function toggleUI()
        if win then
            uiHidden = not uiHidden
            if win:IsA("ScreenGui") then
                win.Enabled = not uiHidden
            else
                win.Visible = not uiHidden
            end
        elseif type(CreateMainUI) == "function" then
            win = CreateMainUI()
            uiHidden = false
        end
    end

    ContextActionService:BindAction("ToggleUI_P", function(_, state)
        if state == Enum.UserInputState.Begin then
            toggleUI()
        end
        return Enum.ContextActionResult.Sink
    end, false, Enum.KeyCode.P)
end

local fontRow = TabRow(3, "Font")
local fontBtn = C("TextButton", { Parent = fontRow, Size = UDim2.new(0,150,1,0), Position = UDim2.new(0,130,0,0), BackgroundColor3 = Color3.fromRGB(70,70,80), BorderSizePixel = 0, Text = "Next Font", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamMedium, TextSize = 14 }, fontRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, fontBtn)
local sizeRow = TabRow(3, "Size")
local sizeBtn = C("TextButton", { Parent = sizeRow, Size = UDim2.new(0,150,1,0), Position = UDim2.new(0,130,0,0), BackgroundColor3 = Color3.fromRGB(70,70,80), BorderSizePixel = 0, Text = "Text +2", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamMedium, TextSize = 13 }, sizeRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, sizeBtn)
local fontIdx, textSize = 1, 18

local function applyFont()
    title.Font = Fonts[fontIdx]
end
fontBtn.MouseButton1Click:Connect(function()
    fontIdx = fontIdx % #Fonts + 1
    applyFont()
end)
sizeBtn.MouseButton1Click:Connect(function()
    textSize = math.clamp(textSize + 2, 12, 28)
    title.TextSize = textSize
end)

local speedRow = TabRow(1, "Speed")
local speedBtn = C("TextButton", { Parent = speedRow, Size = UDim2.new(0,72,1,0), Position = UDim2.new(0,130,0,0), BackgroundColor3 = Color3.fromRGB(70,70,80), BorderSizePixel = 0, Text = "OFF", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, speedRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, speedBtn)
local speedNum = C("TextLabel", { Parent = speedRow, Size = UDim2.new(0,50,1,0), Position = UDim2.new(0,210,0,0), BackgroundTransparency = 1, Text = tostring(speedValue), TextColor3 = Color3.fromRGB(220,220,230), Font = Enum.Font.Gotham, TextSize = 14 }, speedRow)
local speedBox = C("TextBox", {
    Parent = speedRow,
    Size = UDim2.new(0,38,1,0),
    Position = UDim2.new(0,325,0,0),
    BackgroundColor3 = Color3.fromRGB(90,90,100),
    BorderSizePixel = 0,
    Text = "",
    PlaceholderText = "Set",
    TextColor3 = Color3.fromRGB(235,235,240),
    Font = Enum.Font.Gotham,
    TextSize = 14,
    ClearTextOnFocus = true
}, speedRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, speedBox)

speedBox.FocusLost:Connect(function()
    local val = tonumber(speedBox.Text)
    speedBox.Text = ""
    if val and val >= 16 and val <= 500 then
        speedValue = math.floor(val)
        speedNum.Text = tostring(speedValue)
        if speedOn and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
            lp.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = speedValue
        end
    else
        speedBox.PlaceholderText = "Err"
        delay(1, function() speedBox.PlaceholderText = "Set" end)
    end
end)

local plusBtn = C("TextButton", { Parent = speedRow, Size = UDim2.new(0,24,1,0), Position = UDim2.new(0,265,0,0), BackgroundColor3 = Color3.fromRGB(90,90,100), BorderSizePixel = 0, Text = "+", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, speedRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, plusBtn)
local minusBtn = C("TextButton", { Parent = speedRow, Size = UDim2.new(0,24,1,0), Position = UDim2.new(0,295,0,0), BackgroundColor3 = Color3.fromRGB(90,90,100), BorderSizePixel = 0, Text = "-", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, speedRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, minusBtn)

speedBtn.MouseButton1Click:Connect(function()
    speedOn = not speedOn
    speedBtn.Text = speedOn and "ON" or "OFF"
    TweenService:Create(speedBtn, TweenInfo.new(0.2), { BackgroundColor3 = speedOn and Color3.fromRGB(90,180,110) or Color3.fromRGB(70,70,80) }):Play()
    if lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
        lp.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = speedOn and speedValue or 16
    end
end)
plusBtn.MouseButton1Click:Connect(function()
    speedValue = math.clamp(speedValue + 10, 16, 500)
    speedNum.Text = tostring(speedValue)
    if speedOn and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
        lp.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = speedValue
    end
end)
minusBtn.MouseButton1Click:Connect(function()
    speedValue = math.clamp(speedValue - 10, 16, 500)
    speedNum.Text = tostring(speedValue)
    if speedOn and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
        lp.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = speedValue
    end
end)

local speedConn = RunService.RenderStepped:Connect(function()
    if speedOn and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
        local hum = lp.Character:FindFirstChildOfClass("Humanoid")
        if hum.WalkSpeed ~= speedValue then
            hum.WalkSpeed = speedValue
        end
    end
end)
table.insert(allConns, speedConn)

local jumpRow = TabRow(1, "JumpPower")
local jumpBtn = C("TextButton", { Parent = jumpRow, Size = UDim2.new(0,150,1,0), Position = UDim2.new(0,130,0,0), BackgroundColor3 = Color3.fromRGB(70,70,80), BorderSizePixel = 0, Text = "OFF", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, jumpRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, jumpBtn)
jumpBtn.MouseButton1Click:Connect(function()
    local humanoid = lp.Character and lp.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    jumpEnabled = not jumpEnabled
    jumpBtn.Text = jumpEnabled and "ON" or "OFF"
    TweenService:Create(jumpBtn, TweenInfo.new(0.2), { BackgroundColor3 = jumpEnabled and Color3.fromRGB(0,170,0) or Color3.fromRGB(70,70,80) }):Play()
    humanoid.UseJumpPower = true
    humanoid.JumpPower = jumpEnabled and 100 or 50
end)

local infRow = TabRow(1, "InfJump")
local infBtn = C("TextButton", { Parent = infRow, Size = UDim2.new(0,120,1,0), Position = UDim2.new(0,130,0,0), BackgroundColor3 = Color3.fromRGB(70,70,80), BorderSizePixel = 0, Text = "OFF", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, infRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, infBtn)
infBtn.MouseButton1Click:Connect(function()
    infJump = not infJump
    infBtn.Text = infJump and "ON" or "OFF"
    TweenService:Create(infBtn, TweenInfo.new(0.2), { BackgroundColor3 = infJump and Color3.fromRGB(90,180,110) or Color3.fromRGB(70,70,80) }):Play()
end)

local jumpConn = UserInputService.JumpRequest:Connect(function()
    if infJump and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
        lp.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)
table.insert(allConns, jumpConn)

local noclipRow = TabRow(1, "Noclip")
local noclipBtn = C("TextButton", { Parent = noclipRow, Size = UDim2.new(0,120,1,0), Position = UDim2.new(0,130,0,0), BackgroundColor3 = Color3.fromRGB(70,70,80), BorderSizePixel = 0, Text = "OFF", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, noclipRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, noclipBtn)
noclipBtn.MouseButton1Click:Connect(function()
    noclip = not noclip
    noclipBtn.Text = noclip and "ON" or "OFF"
    TweenService:Create(noclipBtn, TweenInfo.new(0.2), { BackgroundColor3 = noclip and Color3.fromRGB(90,180,110) or Color3.fromRGB(70,70,80) }):Play()
end)

noclipConn = RunService.Stepped:Connect(function()
    if noclip and lp.Character then
        for _, part in pairs(lp.Character:GetDescendants()) do
            if part:IsA("BasePart") and part.CanCollide then
                part.CanCollide = false
            end
        end
    end
end)

if noclipConn then table.insert(allConns, noclipConn) end
