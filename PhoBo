print("Hello, Baby <3")
print("Close (P) toggle UI, Q: Bring Player, ShiftRight: Hide/Show")

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local RunService = game:GetService("RunService")

local lp = Players.LocalPlayer
local pg = lp:WaitForChild("PlayerGui")
local existing = pg:FindFirstChild("MenuUI")
if existing then
    pcall(function() existing:Destroy() end)
end

local function C(class, props, parent)
    local obj = Instance.new(class)
    if props then
        for k, v in pairs(props) do
            pcall(function() obj[k] = v end)
        end
    end
    if parent then obj.Parent = parent end
    return obj
end
local PROTECT = true
local ALLOWED_USER_IDS = { 
	9002922877,
    7651295755,
    1658489525,
}
if PROTECT then
    local allowed = false
    for _, id in ipairs(ALLOWED_USER_IDS) do
        if id == lp.UserId then allowed = true; break end
    end
    if not allowed then
        warn("[MyBanhMi] Unauthorized user detected (UserId=" .. tostring(lp.UserId) .. "). Script will stop.")
        return
    end
end

local Themes = {
    Dark = { Primary = Color3.fromRGB(24,24,30), Accent = Color3.fromRGB(145,145,145), Text = Color3.fromRGB(235,240,235), ButtonText = Color3.fromRGB(235,235,240) },
    Pink = { Primary = Color3.fromRGB(255,187,225), Accent = Color3.fromRGB(198,117,225), Text = Color3.fromRGB(50,50,50), ButtonText = Color3.fromRGB(240,240,240) },
    Blue = { Primary = Color3.fromRGB(135,206,235), Accent = Color3.fromRGB(68,142,228), Text = Color3.fromRGB(255,255,255), ButtonText = Color3.fromRGB(240,240,240) },
    White = { Primary = Color3.fromRGB(255,255,255), Accent = Color3.fromRGB(50,50,50), Text = Color3.fromRGB(0,0,0), ButtonText = Color3.fromRGB(0,0,0) }
}
local Fonts = { Enum.Font.Gotham, Enum.Font.GothamBold, Enum.Font.Ubuntu, Enum.Font.Roboto, Enum.Font.FredokaOne }

local screen = C("ScreenGui", { Name = "MenuUI", ResetOnSpawn = false }, pg)
screen.Enabled = true
local win = C("Frame", {
    Name = "Window",
    Size = UDim2.fromOffset(420, 480),
    Position = UDim2.fromScale(0.08, 0.2),
    BackgroundColor3 = Color3.fromRGB(30,30,35),
    BorderSizePixel = 0,
    Active = true
}, screen)
C("UICorner", { CornerRadius = UDim.new(0,14) }, win)
local stroke = C("UIStroke", { ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Thickness = 2, Color = Color3.fromRGB(90,90,100) }, win)

local header = C("Frame", { Size = UDim2.new(1,0,0,42), BackgroundTransparency = 0.15, BackgroundColor3 = Color3.fromRGB(50,50,60), BorderSizePixel = 0 }, win)
C("UICorner", { CornerRadius = UDim.new(0,14) }, header)
local title = C("TextLabel", {
    Size = UDim2.new(1,-100,1,0),
    Position = UDim2.fromOffset(14,0),
    BackgroundTransparency = 1,
    Text = "Linh Is Script <3",
    TextColor3 = Color3.fromRGB(235,235,240),
    Font = Enum.Font.GothamBold,
    TextSize = 18,
    TextXAlignment = Enum.TextXAlignment.Left
}, header)

local toggleBtn = C("TextButton", {
    Name = "ToggleBtn",
    Size = UDim2.fromOffset(80,26),
    Position = UDim2.new(1,-90,0.5,-13),
    BackgroundColor3 = Color3.fromRGB(90,63,150),
    BorderSizePixel = 0,
    Text = "Hide",
    TextColor3 = Color3.fromRGB(235,235,240),
    Font = Enum.Font.GothamMedium,
    TextSize = 14,
    AutoButtonColor = false
}, header)
C("UICorner", { CornerRadius = UDim.new(0,10) }, toggleBtn)

local tabs = { "Main", "Misc", "Setting" }
local tabHolder = C("Frame", { Parent = win, Size = UDim2.new(1,-20,0,36), Position = UDim2.new(0,10,0,48), BackgroundTransparency = 1 })
local tabButtons = {}
local tabContents = {}
local currentTab = 1
for i, name in ipairs(tabs) do
    local btn = C("TextButton", {
        Parent = tabHolder,
        Size = UDim2.new(0,100,0,28),
        Position = UDim2.new(0,(i-1)*106,0,4),
        BackgroundColor3 = Color3.fromRGB(70,70,80),
        BorderSizePixel = 0,
        Text = name,
        TextColor3 = Color3.fromRGB(235,235,240),
        Font = Enum.Font.GothamBold,
        TextSize = 14,
        AutoButtonColor = false
    }, tabHolder)
    C("UICorner", { CornerRadius = UDim.new(0,8) }, btn)
    tabButtons[i] = btn

    local content = C("Frame", {
        Parent = win,
        Size = UDim2.new(1,-20,1,-98),
        Position = UDim2.new(0,10,0,90),
        BackgroundTransparency = 1,
        Visible = (i == currentTab)
    }, win)
    C("UIListLayout", {
        FillDirection = Enum.FillDirection.Vertical,
        Padding = UDim.new(0,8),
        HorizontalAlignment = Enum.HorizontalAlignment.Left,
        SortOrder = Enum.SortOrder.LayoutOrder
    }, content)
    tabContents[i] = content

    btn.MouseButton1Click:Connect(function()
        if animating then return end
        currentTab = i
        for j = 1, #tabs do
            tabContents[j].Visible = not hidden and (j == currentTab)
            tabButtons[j].BackgroundColor3 = (j == currentTab) and Color3.fromRGB(130,130,220) or Color3.fromRGB(70,70,80)
        end
    end)
end
tabButtons[1].BackgroundColor3 = Color3.fromRGB(130,130,220)

local hidden = false
local animating = false
local animDur = 0.28
local easingStyle = Enum.EasingStyle.Quad
local easingDir = Enum.EasingDirection.Out

local speedOn = false
local speedValue = 100
local jumpEnabled = false
local infJump = false
local noclip = false
local esp = false
local xray = false

local flying = false
local bv = nil
local flySpeed = 60
local flyConn = nil

local noclipConn = nil
local allConns = {}

local function tweenAllTexts(target)
    local tweens = {}
    for _, v in pairs(win:GetDescendants()) do
        if (v:IsA("TextLabel") or v:IsA("TextButton")) and v ~= toggleBtn then
            if target == 0 then v.TextTransparency = 1 end -- prepare for fade in
            local ok, t = pcall(function()
                return TweenService:Create(v, TweenInfo.new(0.2, easingStyle, easingDir), {TextTransparency = target})
            end)
            if ok and t then table.insert(tweens, t) end
        end
    end
    return tweens
end

local function setHidden(state)
    if animating then return end
    animating = true
    hidden = state
    toggleBtn.Text = hidden and "Show" or "Hide"

    if hidden then
        for _, v in pairs(tabButtons) do v.Active = false end

        local tweens = tweenAllTexts(1)
        for _, t in ipairs(tweens) do t:Play() end

        local sizeTween = TweenService:Create(win, TweenInfo.new(animDur, easingStyle, easingDir), {Size = UDim2.fromOffset(400, 70)})
        sizeTween:Play()
        sizeTween.Completed:Wait()

        for _, v in pairs(tabButtons) do v.Visible = false end
        for _, v in pairs(tabContents) do v.Visible = false end

    else
        for _, v in pairs(tabButtons) do
            v.Visible = true
            v.Active = false
        end
        for i = 1, #tabContents do
            tabContents[i].Visible = (i == currentTab)
        end

        local sizeTween = TweenService:Create(win, TweenInfo.new(animDur, easingStyle, easingDir), {Size = UDim2.fromOffset(420, 480)})
        sizeTween:Play()
        sizeTween.Completed:Wait()

        local tweens = tweenAllTexts(0)
        for _, t in ipairs(tweens) do t:Play() end

        for _, v in pairs(tabButtons) do v.Active = true end
    end

    animating = false
end

toggleBtn.MouseButton1Click:Connect(function()
    setHidden(not hidden)
end)

local bindToggleConn = ContextActionService:BindAction("ToggleMenu_RShift", function(name, state, input)
    if state == Enum.UserInputState.Begin then
        setHidden(not hidden)
    end
    return Enum.ContextActionResult.Sink
end, false, Enum.KeyCode.RightShift)

local closeBtn = C("TextButton", {
    Name = "CloseBtn",
    Size = UDim2.fromOffset(26,26),
    Position = UDim2.new(1,-30,0.5,-13),
    BackgroundColor3 = Color3.fromRGB(200,60,60),
    BorderSizePixel = 0,
    Text = "X",
    TextColor3 = Color3.fromRGB(255,255,255),
    Font = Enum.Font.GothamBold,
    TextSize = 16,
    AutoButtonColor = false
}, header)
C("UICorner", { CornerRadius = UDim.new(0,6) }, closeBtn)

closeBtn.MouseEnter:Connect(function()
    TweenService:Create(closeBtn, TweenInfo.new(0.12), {BackgroundColor3 = Color3.fromRGB(255,80,80)}):Play()
end)
closeBtn.MouseLeave:Connect(function()
    TweenService:Create(closeBtn, TweenInfo.new(0.12), {BackgroundColor3 = Color3.fromRGB(200,60,60)}):Play()
end)

closeBtn.MouseButton1Click:Connect(function()
    win.Visible = false
end)

do
    local dragging = false
    local dragStart, startPos
    header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = win.Position
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            win.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
    end)
end

local function TabRow(tabIndex, labelText)
    local row = C("Frame", { Size = UDim2.new(1,0,0,36), BackgroundTransparency = 1 }, tabContents[tabIndex])
    local lbl = C("TextLabel", { Size = UDim2.new(0,120,1,0), BackgroundTransparency = 1, Text = labelText, TextColor3 = Color3.fromRGB(220,220,230), Font = Enum.Font.Gotham, TextSize = 14, TextXAlignment = Enum.TextXAlignment.Left }, row)
    return row, lbl
end

local themeRow = TabRow(1, "Theme")
local themeHolder = C("Frame", { Parent = themeRow, Size = UDim2.new(1,-130,1,0), Position = UDim2.new(0,130,0,0), BackgroundTransparency = 1 }, themeRow)
local flow = C("UIGridLayout", { CellSize = UDim2.fromOffset(60,26), CellPadding = UDim2.fromOffset(6,6), FillDirectionMaxCells = 5, SortOrder = Enum.SortOrder.LayoutOrder }, themeHolder)
local currentTheme = "Dark"

local function applyTheme(name)
    local t = Themes[name] or Themes.Dark
    currentTheme = name
    pcall(function()
        win.BackgroundColor3 = t.Primary
        header.BackgroundColor3 = t.Accent
        title.TextColor3 = t.Text
        toggleBtn.TextColor3 = t.Text
        stroke.Color = t.Accent:Lerp(Color3.new(1,1,1), 0.15)
        for _, v in pairs(win:GetDescendants()) do
            if v:IsA("TextButton") then
                v.TextColor3 = t.ButtonText
            elseif v:IsA("TextLabel") then
                v.TextColor3 = t.Text
            end
        end
    end)
end

for name, _ in pairs(Themes) do
    local b = C("TextButton", { Name = "Theme_" .. name, Text = name, BackgroundColor3 = Color3.fromRGB(70,70,80), TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamMedium, TextSize = 14, BorderSizePixel = 0 }, themeHolder)
    C("UICorner", { CornerRadius = UDim.new(0,8) }, b)
    b.MouseEnter:Connect(function() TweenService:Create(b, TweenInfo.new(0.12), { BackgroundColor3 = Color3.fromRGB(95,95,110) }):Play() end)
    b.MouseLeave:Connect(function() TweenService:Create(b, TweenInfo.new(0.12), { BackgroundColor3 = Color3.fromRGB(70,70,80) }):Play() end)
    b.MouseButton1Click:Connect(function() applyTheme(name) end)
end

do
    local transRow = TabRow(3, "Transparency")
    local slider = C("Frame", {Parent = transRow, Size = UDim2.new(1,-180,1,0), Position = UDim2.new(0,130,0,0), BackgroundTransparency = 1}, transRow)
    local bar = C("Frame", {Parent = slider, Size = UDim2.new(1,0,0,6), Position = UDim2.new(0,0,0.5,-3), BackgroundColor3 = Color3.fromRGB(90,90,100), BorderSizePixel = 0}, slider)
    C("UICorner", {CornerRadius = UDim.new(1,0)}, bar)
    local knob = C("Frame", {Parent = slider, Size = UDim2.fromOffset(14,14), Position = UDim2.new(0,0,0.5,-7), BackgroundColor3 = Color3.fromRGB(230,230,235), BorderSizePixel = 0}, slider)
    C("UICorner", {CornerRadius = UDim.new(1,0)}, knob)

    local percLabel = C("TextLabel", {Parent = transRow, Size = UDim2.new(0,60,1,0), Position = UDim2.new(1,-65,0,0), BackgroundTransparency = 1, Text = "0%", TextColor3 = Color3.fromRGB(220,220,230), Font = Enum.Font.Gotham, TextSize = 14}, transRow)

    local dragging = false

    local function updateMenuTransparency(value)
        local alpha = value * 1
        if win then
            win.BackgroundTransparency = alpha
        end
        if header then
            header.BackgroundTransparency = math.clamp(alpha - 0.1, 0, 1)
        end
        for _, v in pairs(win:GetDescendants()) do
            if (v:IsA("TextLabel") or v:IsA("TextButton")) and v ~= toggleBtn then
                pcall(function() v.TextTransparency = value end)
            end
            if v:IsA("GuiObject") and v ~= win and v ~= header then
            end
        end
        percLabel.Text = tostring(math.floor(value * 100)) .. "%"
        if stroke then
            stroke.Thickness = 2 * (1 - value*0.6) + 0.5
        end
    end

    local function setAlphaFromX(x)
        if not bar or not knob then return end
        local barPos = bar.AbsolutePosition.X
        local barSize = bar.AbsoluteSize.X
        if barSize == 0 then return end
        local rel = math.clamp((x - barPos) / barSize, 0, 1)
        knob.Position = UDim2.new(rel, -7, 0.5, -7)
        updateMenuTransparency(rel)
    end

    spawn(function()
        local tries = 0
        while (bar.AbsoluteSize.X == 0) and tries < 50 do
            tries = tries + 1
            task.wait(0.02)
        end
        local initRel = 0
        local barPos = bar.AbsolutePosition.X
        local barSize = bar.AbsoluteSize.X
        if barSize > 0 then
            knob.Position = UDim2.new(initRel, -7, 0.5, -7)
            updateMenuTransparency(initRel)
        end
    end)

    table.insert(allConns, knob.InputBegan:Connect(function(i)
        if i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch then
            dragging = true
        end
    end))

    table.insert(allConns, UserInputService.InputEnded:Connect(function(i)
        if i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end))

    table.insert(allConns, UserInputService.InputChanged:Connect(function(i)
        if dragging and (i.UserInputType == Enum.UserInputType.MouseMovement or i.UserInputType == Enum.UserInputType.Touch) then
            setAlphaFromX(i.Position.X)
        end
    end))

    table.insert(allConns, bar.InputBegan:Connect(function(i)
        if i.UserInputType == Enum.UserInputType.MouseButton1 or i.UserInputType == Enum.UserInputType.Touch then
            setAlphaFromX(i.Position.X)
            dragging = true
        end
    end))
end

do
    local setRow = TabRow(3, "Reset Script")
    local resetBtn = C("TextButton", {
        Parent = setRow,
        Size = UDim2.new(0,140,1,0),
        Position = UDim2.new(0,130,0,0),
        BackgroundColor3 = Color3.fromRGB(200,60,60),
        BorderSizePixel = 0,
        Text = "Reset All",
        TextColor3 = Color3.fromRGB(255,255,255),
        Font = Enum.Font.GothamBold,
        TextSize = 14
    }, setRow)
    C("UICorner", { CornerRadius = UDim.new(0,8) }, resetBtn)

    local resetDebounce = false
    local function resetAll()
        if resetDebounce then return end
        resetDebounce = true

        if getgenv()._RESET_DATA then
            for _, obj in ipairs(getgenv()._RESET_DATA.uiRefs) do 
                pcall(function() obj:Destroy() end) 
            end
            table.clear(getgenv()._RESET_DATA.uiRefs)

            for _, c in ipairs(getgenv()._RESET_DATA.connections) do 
                pcall(function() c:Disconnect() end) 
            end
            table.clear(getgenv()._RESET_DATA.connections)

            for _, t in ipairs(getgenv()._RESET_DATA.threads) do 
                pcall(function() coroutine.close(t) end) 
            end
            table.clear(getgenv()._RESET_DATA.threads)
        end

        if _BOUND_ACTIONS then
            for _, name in ipairs(_BOUND_ACTIONS) do 
                pcall(function() ContextActionService:UnbindAction(name) end) 
            end
            table.clear(_BOUND_ACTIONS)
        end

        if win then
            pcall(function()
                win:Destroy()
            end)
            win = nil
        end

        getgenv().MyBanhMi_Running = false
        flashBtn(resetBtn, "Reset!", 1)

        task.delay(1, function() resetDebounce = false end)
    end

    resetBtn.MouseButton1Click:Connect(resetAll)

    local uiHidden = false
    local function toggleUI()
        if win then
            uiHidden = not uiHidden
            if win:IsA("ScreenGui") then
                win.Enabled = not uiHidden
            else
                win.Visible = not uiHidden
            end
        elseif type(CreateMainUI) == "function" then
            win = CreateMainUI()
            uiHidden = false
        end
    end

    ContextActionService:BindAction("ToggleUI_P", function(_, state)
        if state == Enum.UserInputState.Begin then
            toggleUI()
        end
        return Enum.ContextActionResult.Sink
    end, false, Enum.KeyCode.P)
end

local fontRow = TabRow(3, "Font")
local fontBtn = C("TextButton", { Parent = fontRow, Size = UDim2.new(0,150,1,0), Position = UDim2.new(0,130,0,0), BackgroundColor3 = Color3.fromRGB(70,70,80), BorderSizePixel = 0, Text = "Next Font", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamMedium, TextSize = 14 }, fontRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, fontBtn)
local sizeRow = TabRow(3, "Size")
local sizeBtn = C("TextButton", { Parent = sizeRow, Size = UDim2.new(0,150,1,0), Position = UDim2.new(0,130,0,0), BackgroundColor3 = Color3.fromRGB(70,70,80), BorderSizePixel = 0, Text = "Text +2", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamMedium, TextSize = 13 }, sizeRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, sizeBtn)
local fontIdx, textSize = 1, 18

local function applyFont()
    title.Font = Fonts[fontIdx]
end
fontBtn.MouseButton1Click:Connect(function()
    fontIdx = fontIdx % #Fonts + 1
    applyFont()
end)
sizeBtn.MouseButton1Click:Connect(function()
    textSize = math.clamp(textSize + 2, 12, 28)
    title.TextSize = textSize
end)

local speedRow = TabRow(1, "Speed")
local speedBtn = C("TextButton", { Parent = speedRow, Size = UDim2.new(0,72,1,0), Position = UDim2.new(0,130,0,0), BackgroundColor3 = Color3.fromRGB(70,70,80), BorderSizePixel = 0, Text = "OFF", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, speedRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, speedBtn)
local speedNum = C("TextLabel", { Parent = speedRow, Size = UDim2.new(0,50,1,0), Position = UDim2.new(0,210,0,0), BackgroundTransparency = 1, Text = tostring(speedValue), TextColor3 = Color3.fromRGB(220,220,230), Font = Enum.Font.Gotham, TextSize = 14 }, speedRow)
local speedBox = C("TextBox", {
    Parent = speedRow,
    Size = UDim2.new(0,38,1,0),
    Position = UDim2.new(0,325,0,0),
    BackgroundColor3 = Color3.fromRGB(90,90,100),
    BorderSizePixel = 0,
    Text = "",
    PlaceholderText = "Set",
    TextColor3 = Color3.fromRGB(235,235,240),
    Font = Enum.Font.Gotham,
    TextSize = 14,
    ClearTextOnFocus = true
}, speedRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, speedBox)

speedBox.FocusLost:Connect(function()
    local val = tonumber(speedBox.Text)
    speedBox.Text = ""
    if val and val >= 16 and val <= 500 then
        speedValue = math.floor(val)
        speedNum.Text = tostring(speedValue)
        if speedOn and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
            lp.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = speedValue
        end
    else
        speedBox.PlaceholderText = "Err"
        delay(1, function() speedBox.PlaceholderText = "Set" end)
    end
end)

local plusBtn = C("TextButton", { Parent = speedRow, Size = UDim2.new(0,24,1,0), Position = UDim2.new(0,265,0,0), BackgroundColor3 = Color3.fromRGB(90,90,100), BorderSizePixel = 0, Text = "+", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, speedRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, plusBtn)
local minusBtn = C("TextButton", { Parent = speedRow, Size = UDim2.new(0,24,1,0), Position = UDim2.new(0,295,0,0), BackgroundColor3 = Color3.fromRGB(90,90,100), BorderSizePixel = 0, Text = "-", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, speedRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, minusBtn)

speedBtn.MouseButton1Click:Connect(function()
    speedOn = not speedOn
    speedBtn.Text = speedOn and "ON" or "OFF"
    TweenService:Create(speedBtn, TweenInfo.new(0.2), { BackgroundColor3 = speedOn and Color3.fromRGB(90,180,110) or Color3.fromRGB(70,70,80) }):Play()
    if lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
        lp.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = speedOn and speedValue or 16
    end
end)
plusBtn.MouseButton1Click:Connect(function()
    speedValue = math.clamp(speedValue + 10, 16, 500)
    speedNum.Text = tostring(speedValue)
    if speedOn and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
        lp.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = speedValue
    end
end)
minusBtn.MouseButton1Click:Connect(function()
    speedValue = math.clamp(speedValue - 10, 16, 500)
    speedNum.Text = tostring(speedValue)
    if speedOn and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
        lp.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = speedValue
    end
end)

local speedConn = RunService.RenderStepped:Connect(function()
    if speedOn and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
        local hum = lp.Character:FindFirstChildOfClass("Humanoid")
        if hum.WalkSpeed ~= speedValue then
            hum.WalkSpeed = speedValue
        end
    end
end)
table.insert(allConns, speedConn)

local jumpRow = TabRow(1, "JumpPower")
local jumpBtn = C("TextButton", { Parent = jumpRow, Size = UDim2.new(0,150,1,0), Position = UDim2.new(0,130,0,0), BackgroundColor3 = Color3.fromRGB(70,70,80), BorderSizePixel = 0, Text = "OFF", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, jumpRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, jumpBtn)
jumpBtn.MouseButton1Click:Connect(function()
    local humanoid = lp.Character and lp.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    jumpEnabled = not jumpEnabled
    jumpBtn.Text = jumpEnabled and "ON" or "OFF"
    TweenService:Create(jumpBtn, TweenInfo.new(0.2), { BackgroundColor3 = jumpEnabled and Color3.fromRGB(0,170,0) or Color3.fromRGB(70,70,80) }):Play()
    humanoid.UseJumpPower = true
    humanoid.JumpPower = jumpEnabled and 100 or 50
end)

local infRow = TabRow(1, "InfJump")
local infBtn = C("TextButton", { Parent = infRow, Size = UDim2.new(0,120,1,0), Position = UDim2.new(0,130,0,0), BackgroundColor3 = Color3.fromRGB(70,70,80), BorderSizePixel = 0, Text = "OFF", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, infRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, infBtn)
infBtn.MouseButton1Click:Connect(function()
    infJump = not infJump
    infBtn.Text = infJump and "ON" or "OFF"
    TweenService:Create(infBtn, TweenInfo.new(0.2), { BackgroundColor3 = infJump and Color3.fromRGB(90,180,110) or Color3.fromRGB(70,70,80) }):Play()
end)

local jumpConn = UserInputService.JumpRequest:Connect(function()
    if infJump and lp.Character and lp.Character:FindFirstChildOfClass("Humanoid") then
        lp.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)
table.insert(allConns, jumpConn)

local noclipRow = TabRow(1, "Noclip")
local noclipBtn = C("TextButton", { Parent = noclipRow, Size = UDim2.new(0,120,1,0), Position = UDim2.new(0,130,0,0), BackgroundColor3 = Color3.fromRGB(70,70,80), BorderSizePixel = 0, Text = "OFF", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, noclipRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, noclipBtn)
noclipBtn.MouseButton1Click:Connect(function()
    noclip = not noclip
    noclipBtn.Text = noclip and "ON" or "OFF"
    TweenService:Create(noclipBtn, TweenInfo.new(0.2), { BackgroundColor3 = noclip and Color3.fromRGB(90,180,110) or Color3.fromRGB(70,70,80) }):Play()
end)

noclipConn = RunService.Stepped:Connect(function()
    if noclip and lp.Character then
        for _, part in pairs(lp.Character:GetDescendants()) do
            if part:IsA("BasePart") and part.CanCollide then
                part.CanCollide = false
            end
        end
    end
end)

if noclipConn then table.insert(allConns, noclipConn) end

local espRow = TabRow(2, "ESP")
local espBtn = C("TextButton", { Parent = espRow, Size = UDim2.new(0,120,1,0), Position = UDim2.new(0,130,0,0), BackgroundColor3 = Color3.fromRGB(70,70,80), BorderSizePixel = 0, Text = "OFF", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, espRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, espBtn)
local espObjects = {}

local function safeDestroy(o)
    if o and typeof(o) == "Instance" and o.Parent then
        pcall(function() o:Destroy() end)
    end
end

local espColor = Color3.fromRGB(255,85,0)
local function getPlayerESPColor(plr)
    if plr.Team and plr.Team.TeamColor then
        return plr.Team.TeamColor.Color
    end
    return espColor
end

local function createESPForCharacter(plr, char)
    if plr == lp then return end
    if not char or not char:FindFirstChild("HumanoidRootPart") or not char:FindFirstChild("Head") then return end
    if espObjects[plr] then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    local color = getPlayerESPColor(plr)
    local box = Instance.new("BoxHandleAdornment")
    box.Size = Vector3.new(4,6,2)
    box.Color3 = color
    box.Transparency = 0.6
    box.ZIndex = 10
    box.AlwaysOnTop = true
    box.Adornee = hrp
    box.Parent = char

    local tag = Instance.new("BillboardGui")
    tag.Adornee = char:FindFirstChild("Head")
    tag.Size = UDim2.new(0,100,0,16)
    tag.StudsOffset = Vector3.new(0, 2, 0)
    tag.AlwaysOnTop = true
    tag.Parent = char

    local label = Instance.new("TextLabel")
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(1,0,1,0)
    label.Text = plr.Name
    label.TextColor3 = color
    label.Font = Enum.Font.GothamBold
    label.TextSize = 14
    label.Parent = tag

    espObjects[plr] = { box = box, tag = tag }
end

local function removeESPForPlayer(plr)
    if espObjects[plr] then
        safeDestroy(espObjects[plr].box)
        safeDestroy(espObjects[plr].tag)
        espObjects[plr] = nil
    end
end

local function updateESPAll()
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= lp then
            if esp then
                local char = plr.Character
                if char then
                    createESPForCharacter(plr, char)
                end
            else
                removeESPForPlayer(plr)
            end
        end
    end
end
local function onPlayerCharacterAdded(plr)
    return function(char)
        removeESPForPlayer(plr)

        if esp then
            spawn(function()
                local hrp = char:WaitForChild("HumanoidRootPart", 5)
                local head = char:FindFirstChild("Head") or char:WaitForChild("Head", 5)
                if hrp and head then
                    createESPForCharacter(plr, char)
                end
            end)
        end
    end
end

for _, plr in ipairs(Players:GetPlayers()) do
    local conn = plr.CharacterAdded:Connect(onPlayerCharacterAdded(plr))
    table.insert(allConns, conn)
    if plr.Character and esp then
        spawn(function()
            local hrp = plr.Character:WaitForChild("HumanoidRootPart", 5)
            if hrp then createESPForCharacter(plr, plr.Character) end
        end)
    end
end

local playerAddedConn = Players.PlayerAdded:Connect(function(plr)
    local conn = plr.CharacterAdded:Connect(onPlayerCharacterAdded(plr))
    table.insert(allConns, conn)
end)
table.insert(allConns, playerAddedConn)

local playerRemovingConn = Players.PlayerRemoving:Connect(function(plr)
    removeESPForPlayer(plr)
end)
table.insert(allConns, playerRemovingConn)

espBtn.MouseButton1Click:Connect(function()
    esp = not esp
    espBtn.Text = esp and "ON" or "OFF"
    TweenService:Create(espBtn, TweenInfo.new(0.2), { BackgroundColor3 = esp and Color3.fromRGB(130,130,220) or Color3.fromRGB(70,70,80) }):Play()
    updateESPAll()
end)


local xrayRow = TabRow(2, "Xray")
local xrayBtn = C("TextButton", { Parent = xrayRow, Size = UDim2.new(0,120,1,0), Position = UDim2.new(0,130,0,0), BackgroundColor3 = Color3.fromRGB(70,70,80), BorderSizePixel = 0, Text = "OFF", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, xrayRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, xrayBtn)
xrayBtn.MouseButton1Click:Connect(function()
    xray = not xray
    xrayBtn.Text = xray and "ON" or "OFF"
    TweenService:Create(xrayBtn, TweenInfo.new(0.2), { BackgroundColor3 = xray and Color3.fromRGB(130,130,220) or Color3.fromRGB(70,70,80) }):Play()

    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("BasePart") and (not obj:IsDescendantOf(lp.Character)) then
            pcall(function() obj.LocalTransparencyModifier = xray and 0.7 or 0 end)
        end
    end
end)

local tpRow = TabRow(2, "Teleport")
local tpBox = C("TextBox", {
    Parent = tpRow,
    Size = UDim2.new(0,120,1,0),
    Position = UDim2.new(0,130,0,0),
    BackgroundColor3 = Color3.fromRGB(70,70,80),
    BorderSizePixel = 0,
    Text = "",
    PlaceholderText = "PlayerName",
    TextColor3 = Color3.fromRGB(235,235,240),
    Font = Enum.Font.Gotham,
    TextSize = 14,
    ClearTextOnFocus = true
}, tpRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, tpBox)

local tpBtn = C("TextButton", {
    Parent = tpRow,
    Size = UDim2.new(0,80,1,0),
    Position = UDim2.new(0,260,0,0),
    BackgroundColor3 = Color3.fromRGB(90,90,100),
    BorderSizePixel = 0,
    Text = "TP",
    TextColor3 = Color3.fromRGB(235,235,240),
    Font = Enum.Font.GothamBold,
    TextSize = 14
}, tpRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, tpBtn)

local function findPlayerByPartial(namePart)
    if not namePart or namePart == "" then return nil end
    namePart = string.lower(namePart)
    for _, plr in ipairs(Players:GetPlayers()) do
        if string.find(string.lower(plr.Name), namePart, 1, true) then
            return plr
        end
    end
    return nil
end

tpBtn.MouseButton1Click:Connect(function()
    local nameInput = tostring(tpBox.Text or ""):gsub("^%s*(.-)%s*$", "%1")
    tpBox.Text = ""
    local hrp = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
    local targetPlayer = findPlayerByPartial(nameInput)
    if hrp and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        hrp.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0,3,0)
    end
end)

local flyRow = TabRow(1, "Fly")
local flyBtn = C("TextButton", { Parent = flyRow, Size = UDim2.new(0,120,1,0), Position = UDim2.new(0,130,0,0), BackgroundColor3 = Color3.fromRGB(70,70,80), BorderSizePixel = 0, Text = "OFF", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, flyRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, flyBtn)
local flySpeedLabel = C("TextLabel", { Parent = flyRow, Size = UDim2.new(0,60,1,0), Position = UDim2.new(0,260,0,0), BackgroundTransparency = 1, Text = "Speed: "..flySpeed, TextColor3 = Color3.fromRGB(220,220,230), Font = Enum.Font.Gotham, TextSize = 14 }, flyRow)
local flyPlusBtn = C("TextButton", { Parent = flyRow, Size = UDim2.new(0,24,1,0), Position = UDim2.new(0,320,0,0), BackgroundColor3 = Color3.fromRGB(90,90,100), BorderSizePixel = 0, Text = "+", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, flyRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, flyPlusBtn)
local flyMinusBtn = C("TextButton", { Parent = flyRow, Size = UDim2.new(0,24,1,0), Position = UDim2.new(0,350,0,0), BackgroundColor3 = Color3.fromRGB(90,90,100), BorderSizePixel = 0, Text = "-", TextColor3 = Color3.fromRGB(235,235,240), Font = Enum.Font.GothamBold, TextSize = 14 }, flyRow)
C("UICorner", { CornerRadius = UDim.new(0,8) }, flyMinusBtn)

flyPlusBtn.MouseButton1Click:Connect(function()
    flySpeed = math.clamp(flySpeed + 10, 20, 200)
    flySpeedLabel.Text = "Speed: "..flySpeed
end)
flyMinusBtn.MouseButton1Click:Connect(function()
    flySpeed = math.clamp(flySpeed - 10, 20, 200)
    flySpeedLabel.Text = "Speed: "..flySpeed
end)

flyBtn.MouseButton1Click:Connect(function()
    flying = not flying
    flyBtn.Text = flying and "ON" or "OFF"
    TweenService:Create(flyBtn, TweenInfo.new(0.2), { BackgroundColor3 = flying and Color3.fromRGB(130,130,220) or Color3.fromRGB(70,70,80) }):Play()
    if flying then
        local hrp = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
        local hum = lp.Character and lp.Character:FindFirstChildOfClass("Humanoid")
        if hrp then
            if not bv then
                bv = Instance.new("BodyVelocity")
                bv.MaxForce = Vector3.new(1e5,1e5,1e5)
                bv.Velocity = Vector3.new(0,0,0)
                bv.Parent = hrp
            end
            if hum then pcall(function() hum.PlatformStand = true end) end
        end
    else
        if bv then
            pcall(function() bv:Destroy() end)
            bv = nil
        end
        local hum = lp.Character and lp.Character:FindFirstChildOfClass("Humanoid")
        if hum then pcall(function() hum.PlatformStand = false end) end
    end
end)

flyConn = RunService.RenderStepped:Connect(function()
    if flying and lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = lp.Character:FindFirstChild("HumanoidRootPart")
        if not bv or bv.Parent ~= hrp then
            if bv then pcall(function() bv:Destroy() end) end
            bv = Instance.new("BodyVelocity")
            bv.MaxForce = Vector3.new(1e5,1e5,1e5)
            bv.Velocity = Vector3.new(0,0,0)
            bv.Parent = hrp
        end

        local cam = workspace.CurrentCamera
        local moveDir = Vector3.new(0,0,0)
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            moveDir = moveDir + cam.CFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            moveDir = moveDir - cam.CFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            moveDir = moveDir - cam.CFrame.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            moveDir = moveDir + cam.CFrame.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
            moveDir = moveDir + Vector3.new(0,1,0)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
            moveDir = moveDir - Vector3.new(0,1,0)
        end

        if moveDir.Magnitude > 0 then
            bv.Velocity = moveDir.Unit * flySpeed
        else
            bv.Velocity = Vector3.new(0,0,0)
        end
    end
end)
if flyConn then table.insert(allConns, flyConn) end

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local lp = Players.LocalPlayer

-- ====== UI bootstrap (use existing if found; else create simple one) ======
local function findUI()
    if not lp or not lp:FindFirstChild("PlayerGui") then return nil end
    local pg = lp:FindFirstChild("PlayerGui")
    local gui = pg:FindFirstChild("BringGoGui")
    if gui and gui:IsA("ScreenGui") then
        return gui
    end
    return nil
end

local function createMinimalUI()
    if not lp or not lp:FindFirstChild("PlayerGui") then return end
    local pg = lp:FindFirstChild("PlayerGui")
    local screen = Instance.new("ScreenGui")
    screen.Name = "BringGoGui"
    screen.ResetOnSpawn = false
    screen.Parent = pg

    local frame = Instance.new("Frame")
    frame.Name = "Panel"
    frame.Size = UDim2.new(0,300,0,220)
    frame.Position = UDim2.new(0,10,0,50)
    frame.BackgroundTransparency = 0.25
    frame.BackgroundColor3 = Color3.fromRGB(40,40,40)
    frame.BorderSizePixel = 0
    frame.Parent = screen

    local box = Instance.new("TextBox")
    box.Name = "BringBox"
    box.Size = UDim2.new(1,-20,0,28)
    box.Position = UDim2.new(0,10,0,8)
    box.PlaceholderText = "Name"
    box.Text = ""
    box.Parent = frame

    local function makeBtn(name, y)
        local b = Instance.new("TextButton")
        b.Size = UDim2.new(1,-20,0,28)
        b.Position = UDim2.new(0,10,0,y)
        b.Text = name
        b.Parent = frame
        return b
    end

    local bringBtn = makeBtn("Bring", 44)
    bringBtn.Name = "BringBtn"
    local bringAllBtn = makeBtn("Bring All", 78)
    bringAllBtn.Name = "BringAllBtn"
    local bringPlayerBtn = makeBtn("Bring Player", 112)
    bringPlayerBtn.Name = "BringPlayerBtn"
    local goBtn = makeBtn("Go", 146)
    goBtn.Name = "GoBtn"

    return {
        Gui = screen,
        BringBox = box,
        BringBtn = bringBtn,
        BringAllBtn = bringAllBtn,
        BringPlayerBtn = bringPlayerBtn,
        GoBtn = goBtn
    }
end

local uiRoot = findUI()
local bringBtn, bringAllBtn, bringPlayerBtn, goBtn, bringBox
if uiRoot then
    bringBox = uiRoot:FindFirstChild("BringBox", true) or uiRoot:FindFirstChild("bringBox", true)
    bringBtn = uiRoot:FindFirstChild("BringBtn", true) or uiRoot:FindFirstChild("bringBtn", true)
    bringAllBtn = uiRoot:FindFirstChild("BringAllBtn", true) or uiRoot:FindFirstChild("bringAllBtn", true)
    bringPlayerBtn = uiRoot:FindFirstChild("BringPlayerBtn", true) or uiRoot:FindFirstChild("bringPlayerBtn", true)
    goBtn = uiRoot:FindFirstChild("GoBtn", true) or uiRoot:FindFirstChild("goBtn", true)
end

if not (bringBtn and bringAllBtn and bringPlayerBtn and goBtn and bringBox) then
    local created = createMinimalUI()
    if created then
        bringBox = bringBox or created.BringBox
        bringBtn = bringBtn or created.BringBtn
        bringAllBtn = bringAllBtn or created.BringAllBtn
        bringPlayerBtn = bringPlayerBtn or created.BringPlayerBtn
        goBtn = goBtn or created.GoBtn
    end
end

local function safeName(obj)
    if not obj then return "nil" end
    local ok, s = pcall(function() return obj:GetFullName() end)
    if ok and s then return s end
    return tostring(obj)
end

local function storePartState(part)
    if not (part and part:IsA("BasePart")) then return nil end
    local state = { anchored = false, lin = Vector3.new(), ang = Vector3.new() }
    local ok, lin, ang = pcall(function()
        return part.Anchored, part.AssemblyLinearVelocity, part.AssemblyAngularVelocity
    end)
    if ok then
        state.anchored = lin or false 
        local anchor_ok, anchorVal = pcall(function() return part.Anchored end)
        if anchor_ok then state.anchored = anchorVal end

        local lin_ok, linVal = pcall(function() return part.AssemblyLinearVelocity end)
        if lin_ok and linVal then state.lin = linVal end
        local ang_ok, angVal = pcall(function() return part.AssemblyAngularVelocity end)
        if ang_ok and angVal then state.ang = angVal end
    else
        pcall(function() state.anchored = part.Anchored end)
        pcall(function() state.lin = part.Velocity end)
    end
    return state
end

local function restorePartState(part, state)
    if not (part and part.Parent and state) then return end
    pcall(function()
        if state.anchored ~= nil then part.Anchored = state.anchored end
    end)
    pcall(function()
        local hasAssembly = (part.AssemblyLinearVelocity ~= nil)
        if hasAssembly and state.lin then
            part.AssemblyLinearVelocity = state.lin
            part.AssemblyAngularVelocity = state.ang or Vector3.new()
        elseif state.lin then
            part.Velocity = state.lin
        end
    end)
end

local function findAllByName(name)
    local lower = (name or ""):lower()
    local found = {}
    if lower == "" then return found end
    for _, obj in ipairs(workspace:GetDescendants()) do
        if type(obj.Name) == "string" and obj.Name:lower() == lower then
            table.insert(found, obj)
        end
    end
    return found
end

local function findFirstByName(name)
    for _, obj in ipairs(findAllByName(name)) do
        return obj
    end
    return nil
end

local function moveTo(obj, destCFrame)
    if not obj or not obj.Parent then return false, "Object invalid" end
    if lp.Character and obj:IsDescendantOf(lp.Character) then
        return false, "Target belongs to you"
    end

    if obj:IsA("BasePart") then
        local state = storePartState(obj)
        pcall(function() obj.Anchored = true end)
        local ok, err = pcall(function() obj.CFrame = destCFrame end)
        if obj and obj.Parent then
            restorePartState(obj, state)
        end
        if not ok then return false, tostring(err) end
        return true
    end

    if obj:IsA("Model") then
        if obj.PrimaryPart then
            local ok, err = pcall(function() obj:SetPrimaryPartCFrame(destCFrame) end)
            if not ok then return false, tostring(err) end
            return true
        end

        local parts = {}
        for _, p in ipairs(obj:GetDescendants()) do
            if p:IsA("BasePart") then table.insert(parts, p) end
        end
        if #parts == 0 then return false, "Model has no BaseParts" end

        local states = {}
        local center = Vector3.new(0,0,0)
        for _, p in ipairs(parts) do
            states[p] = storePartState(p)
            pcall(function() center = center + p.Position end)
        end
        center = center / #parts
        local delta = destCFrame.Position - center

        for _, p in ipairs(parts) do
            pcall(function() p.Anchored = true end)
        end

        for _, p in ipairs(parts) do
            pcall(function() p.CFrame = p.CFrame + delta end)
        end

        for _, p in ipairs(parts) do
            restorePartState(p, states[p])
        end

        return true
    end

    return false, "Unsupported instance type"
end

local function flashBtn(btn, txt, dt)
    if not btn then return end
    local ok, old = pcall(function() return btn.Text end)
    if not ok then return end
    pcall(function() btn.Text = txt end)
    delay(dt or 0.9, function()
        if btn and btn.Parent then
            pcall(function() btn.Text = old end)
        end
    end)
end

local function findPartBest(name)
    if type(findFirstByName) == "function" then
        return findFirstByName(name)
    end

    local key = tostring(name or ""):lower():gsub("^%s*(.-)%s*$","%1")
    if key == "" then return nil end
    local best, bd = nil, math.huge
    local hrpPos = (lp.Character and lp.Character:FindFirstChild("HumanoidRootPart") and lp.Character.HumanoidRootPart.Position) or Vector3.new()
    for _, v in ipairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and type(v.Name) == "string" and v.Name:lower() == key then
            local ok, d = pcall(function() return (v.Position - hrpPos).Magnitude end)
            if ok and d and d < bd then bd = d; best = v end
        end
    end
    if best then return best end
    for _, v in ipairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and type(v.Name) == "string" and v.Name:lower():find(key,1,true) then
            local ok, d = pcall(function() return (v.Position - hrpPos).Magnitude end)
            if ok and d and d < bd then bd = d; best = v end
        end
    end
    return best
end

local TELEPORT_TWEEN_TIME = 0.22
local goDebounce = false
local lastPos = nil

local function GoToPartByName(name)
    if goDebounce then return false, "Busy" end
    goDebounce = true
    task.defer(function() task.wait(0.6); goDebounce = false end)

    local hrp = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return false, "No HRP" end

    local part = findPartBest(name)
    if not part then return false, "Part not found" end

    pcall(function() lastPos = hrp.Position end)

    local destCFrame = CFrame.new(part.Position + Vector3.new(0,4,0))
    local ok, err = pcall(function()
        if TELEPORT_TWEEN_TIME and TELEPORT_TWEEN_TIME > 0 then
            local tween = TweenService:Create(hrp, TweenInfo.new(TELEPORT_TWEEN_TIME, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {CFrame = destCFrame})
            tween:Play()
        else
            hrp.CFrame = destCFrame
        end
    end)
    if not ok then
        pcall(function() hrp.CFrame = destCFrame end)
    end
    return true, "Teleported to "..(part.Name or "Part")
end

local function GoBack()
    local hrp = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return false, "No HRP" end
    if not lastPos then return false, "No last position" end
    local dest = CFrame.new(lastPos)
    local ok, err = pcall(function() hrp.CFrame = dest end)
    if not ok then return false, tostring(err) end
    lastPos = nil
    return true
end

if bringBtn then
    bringBtn.MouseButton1Click:Connect(function()
        local name = tostring((bringBox and bringBox.Text) or ""):gsub("^%s*(.-)%s*$", "%1")
        if name == "" then flashBtn(bringBtn, "Empty", 0.8); return end
        local target = findFirstByName(name)
        if not target then flashBtn(bringBtn, "Not Found", 1.2); return end
        local hrp = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then flashBtn(bringBtn, "No HRP", 1.2); return end
        local dest = hrp.CFrame + Vector3.new(0,5,0)
        local ok, res = pcall(function() return moveTo(target, dest) end)
        if not ok then flashBtn(bringBtn, "Err", 1.2); warn("BringPart pcall error:", res); return end
        if res == true then flashBtn(bringBtn, "Done", 0.9) else flashBtn(bringBtn, "Fail", 1.2); warn("BringPart failed:", res) end
    end)
end

if bringAllBtn then
    bringAllBtn.MouseButton1Click:Connect(function()
        local name = tostring((bringBox and bringBox.Text) or ""):gsub("^%s*(.-)%s*$", "%1")
        if name == "" then flashBtn(bringAllBtn, "Empty", 0.8); return end
        local list = findAllByName(name)
        if #list == 0 then flashBtn(bringAllBtn, "No Match", 1.2); return end
        local hrp = lp.Character and lp.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then flashBtn(bringAllBtn, "No HRP", 1.2); return end
        local basePos = hrp.Position + Vector3.new(0,5,0)
        local offsetStep = 4
        for i, obj in ipairs(list) do
            local dest = CFrame.new(basePos + Vector3.new(((i-1)%5)*offsetStep, math.floor((i-1)/5)*-offsetStep, 0))
            local ok, res = pcall(function() return moveTo(obj, dest) end)
            if not ok then warn("BringAll pcall error for", safeName(obj), res) end
            if ok and res ~= true then warn("BringAll moveTo failed for", safeName(obj), res) end
        end
        flashBtn(bringAllBtn, "Done", 1)
    end)
end

if bringPlayerBtn then
    bringPlayerBtn.MouseButton1Click:Connect(function()
        local name = tostring((bringBox and bringBox.Text) or ""):gsub("^%s*(.-)%s*$","%1")
        if type(doBringPlayerByName) == "function" then
            doBringPlayerByName(name)
            if bringBox then bringBox.Text = "" end
        else
            flashBtn(bringPlayerBtn, "N/A", 1)
        end
    end)
end

if goBtn then
    goBtn.MouseButton1Click:Connect(function()
        local name = tostring((bringBox and bringBox.Text) or ""):gsub("^%s*(.-)%s*$","%1")
        if name == "" then flashBtn(goBtn, "Empty", 0.8); return end
        local ok, msg = pcall(function() return GoToPartByName(name) end)
        if not ok then flashBtn(goBtn, "Err", 1.2); warn("[GoToPart] error:", msg); return end
        flashBtn(goBtn, "Go", 0.6)
    end)
end
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.Q then
        local name = tostring((bringBox and bringBox.Text) or ""):gsub("^%s*(.-)%s*$","%1")
        if name ~= "" then
            if type(doBringPlayerByName) == "function" then doBringPlayerByName(name); if bringBox then bringBox.Text = "" end end
            return
        end
        local cam = workspace.CurrentCamera
        if not cam then return end
        local params = RaycastParams.new()
        params.FilterDescendantsInstances = { lp.Character }
        params.FilterType = Enum.RaycastFilterType.Blacklist
        params.IgnoreWater = true
        local rayResult = workspace:Raycast(cam.CFrame.Position, cam.CFrame.LookVector * 200, params)
        if not rayResult or not rayResult.Instance then flashBtn(bringPlayerBtn, "No Target", 1); return end
        local model = rayResult.Instance:FindFirstAncestorOfClass("Model")
        if not model then flashBtn(bringPlayerBtn, "No Target", 1); return end
        local found = false
        for _, plr in ipairs(Players:GetPlayers()) do
            if plr.Character == model and plr ~= lp then
                if type(doBringPlayerByName) == "function" then doBringPlayerByName(plr.Name) end
                found = true
                break
            end
        end
        if not found then flashBtn(bringPlayerBtn, "No Target", 1) end
    end
end)

pcall(function()
    if safeTabRow and type(safeTabRow) == "function" then
        local antiRow = safeTabRow(2, "AntiBring")
        for _, ch in ipairs(antiRow:GetChildren()) do
            if not ch:IsA("UIListLayout") and not ch:IsA("UIPadding") then
                pcall(function() ch:Destroy() end)
            end
        end
    end
end)

table.insert(allConns, inputQConn)

applyTheme("Dark")

local function cleanupAll()
    for plr, _ in pairs(espObjects) do
        removeESPForPlayer(plr)
    end

    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("BasePart") then
            pcall(function() obj.LocalTransparencyModifier = 0 end)
        end
    end

    if bv then
        pcall(function() bv:Destroy() end)
        bv = nil
    end

    if flyConn and flyConn.Connected then
        pcall(function() flyConn:Disconnect() end)
        flyConn = nil
    end
    if noclipConn and noclipConn.Connected then
        pcall(function() noclipConn:Disconnect() end)
        noclipConn = nil
    end

    for _, c in ipairs(allConns) do
        if c and c.Connected then
            pcall(function() c:Disconnect() end)
        end
    end
    table.clear(allConns)

    pcall(function() ContextActionService:UnbindAction("ToggleMenu_RShift") end)
    pcall(function() ContextActionService:UnbindAction("ToggleBring_Q") end)

    if lp and lp.Character then
        local humanoid = lp.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            pcall(function()
                humanoid.WalkSpeed = 16
                humanoid.JumpPower = 50
                humanoid.PlatformStand = false
            end)
        end
    end

    speedOn = false
    jumpEnabled = false
    infJump = false
    noclip = false
    esp = false
    xray = false
    flying = false

    if screen and screen.Parent then
        pcall(function() screen:Destroy() end)
    end
end

--== Character respawn handlers ==--
local function onCharacterAdded(char)
    local hum = char:FindFirstChildOfClass("Humanoid") or char:WaitForChild("Humanoid", 5)
    if hum then
        if speedOn then pcall(function() hum.WalkSpeed = speedValue end) end
        pcall(function() hum.UseJumpPower = true; hum.JumpPower = (jumpEnabled and 100 or 50) end)
        if flying and not bv then
            local hrp = char:FindFirstChild("HumanoidRootPart")
            if hrp then
                bv = Instance.new("BodyVelocity")
                bv.MaxForce = Vector3.new(1e5,1e5,1e5)
                bv.Velocity = Vector3.new(0,0,0)
                bv.Parent = hrp
                pcall(function() hum.PlatformStand = true end)
            end
        end
    end
end

local function onCharacterRemoving()
    if bv then pcall(function() bv:Destroy() end) bv = nil end
end

local charAddedConn = lp.CharacterAdded:Connect(onCharacterAdded)
local charRemovingConn = lp.CharacterRemoving:Connect(onCharacterRemoving)
if charAddedConn then table.insert(allConns, charAddedConn) end
if charRemovingConn then table.insert(allConns, charRemovingConn) end

if lp.Character then onCharacterAdded(lp.Character) end

win = CreateMainUI()
createTabs()
do
    local setRow = TabRow(3, "Reset Script")
end
ContextActionService:BindAction("ToggleUI_P", function(_, state)
    if state == Enum.UserInputState.Begin then toggleUI() end
    return Enum.ContextActionResult.Sink
end, false, Enum.KeyCode.P)

rebindAllKeyActions()
